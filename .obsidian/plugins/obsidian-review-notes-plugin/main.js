/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RecentNotesPlugin
});
module.exports = __toCommonJS(main_exports);

// icons.ts
var import_obsidian = require("obsidian");
var icons = {
  sortAsc: `
<svg class="action-icon" version="1.1" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
  <g transform="matrix(1 0 0 -1 0 501.15)" stroke-width="1.3333">
    <path d="m353.6 74.486c-11.776 0-21.333 9.5573-21.333 21.333v298.67c0 11.776 9.5573 21.333 21.333 21.333s21.333-9.5573 21.333-21.333v-298.67c0-11.776-9.5573-21.333-21.333-21.333z"/>
    <path d="m353.6 74.486c-5.4636 0-10.922 2.0781-15.079 6.2552l-113.78 113.78c-8.3333 8.3333-8.3333 21.844 0 30.177 8.3333 8.3333 21.844 8.3333 30.183 0l98.697-98.703 98.703 98.703c8.3333 8.3333 21.849 8.3333 30.183 0 8.3333-8.3333 8.3333-21.844 0-30.177l-113.78-113.78c-4.2083-4.1771-9.6667-6.2552-15.131-6.2552z"/>
  </g>
  <path d="m166.04 210.11q-5.0971-13.492-9.5945-26.385-4.4974-13.192-9.2947-26.685h-94.146l-18.889 53.07h-30.283q11.993-32.981 22.487-60.865 10.494-28.184 20.388-53.369 10.194-25.186 20.089-47.973 9.8943-23.087 20.688-45.574h26.685q10.794 22.487 20.688 45.574 9.8943 22.787 19.789 47.973 10.194 25.186 20.688 53.369 10.494 27.884 22.487 60.865zm-27.284-77.056q-9.5945-26.085-19.189-50.371-9.2947-24.586-19.489-47.073-10.494 22.487-20.089 47.073-9.2947 24.286-18.589 50.371z"/>
  <path d="m173.24 325.25q-6.896 7.7955-16.191 18.889-8.9948 10.794-19.189 24.286-10.194 13.192-20.988 28.184-10.794 14.692-21.288 29.983-10.194 14.991-19.489 29.983-9.2947 14.991-16.79 28.484h116.93v24.886h-150.81v-19.489q6.2964-11.993 14.692-26.385 8.695-14.392 18.29-29.383 9.8943-14.991 20.388-30.283t20.688-29.383q10.494-14.092 20.088-26.385 9.8943-12.293 17.99-21.588h-106.74v-24.886h142.42z"/>
</svg>`,
  sortDesc: `
<svg class="action-icon" version="1.1" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
  <g transform="matrix(1 0 0 -1 0 501.15)" stroke-width="1.3333">
    <path d="m353.6 74.486c-11.776 0-21.333 9.5573-21.333 21.333v298.67c0 11.776 9.5573 21.333 21.333 21.333s21.333-9.5573 21.333-21.333v-298.67c0-11.776-9.5573-21.333-21.333-21.333z"/>
    <path d="m353.6 74.486c-5.4636 0-10.922 2.0781-15.079 6.2552l-113.78 113.78c-8.3333 8.3333-8.3333 21.844 0 30.177 8.3333 8.3333 21.844 8.3333 30.183 0l98.697-98.703 98.703 98.703c8.3333 8.3333 21.849 8.3333 30.183 0 8.3333-8.3333 8.3333-21.844 0-30.177l-113.78-113.78c-4.2083-4.1771-9.6667-6.2552-15.131-6.2552z"/>
  </g>
  <path d="m169.11 507.72q-5.0971-13.492-9.5945-26.385-4.4974-13.192-9.2947-26.685h-94.146l-18.889 53.07h-30.283q11.993-32.981 22.487-60.865 10.494-28.184 20.388-53.369 10.194-25.186 20.088-47.973 9.8943-23.087 20.688-45.574h26.685q10.794 22.487 20.688 45.574 9.8943 22.787 19.789 47.973 10.194 25.186 20.688 53.369 10.494 27.884 22.487 60.865zm-27.284-77.056q-9.5945-26.085-19.189-50.371-9.2947-24.586-19.489-47.073-10.494 22.487-20.089 47.073-9.2947 24.286-18.589 50.371z"/>
  <path d="m176.31 27.639q-6.896 7.7955-16.191 18.889-8.9948 10.794-19.189 24.286-10.194 13.192-20.988 28.184-10.794 14.692-21.288 29.983-10.194 14.991-19.489 29.983-9.2947 14.991-16.79 28.484h116.93v24.886h-150.81v-19.489q6.2964-11.993 14.692-26.385 8.695-14.392 18.29-29.383 9.8943-14.991 20.388-30.283 10.494-15.291 20.688-29.383 10.494-14.092 20.088-26.385 9.8943-12.293 17.99-21.588h-106.74v-24.886h142.42z"/>
</svg>`
};
var addIcons = () => {
  Object.keys(icons).forEach((key) => {
    if (key !== "help") {
      (0, import_obsidian.addIcon)(key, icons[key]);
    }
  });
};

// main.ts
var import_obsidian3 = require("obsidian");

// review-notes-view.ts
var import_obsidian2 = require("obsidian");
var VIEW_TYPE_REVIEW_NOTES = "review-notes";
var ReviewNotesView = class extends import_obsidian2.ItemView {
  constructor(leaf, recentNotes, plugin) {
    super(leaf);
    this.removeExtension = (filename) => {
      return filename.replace(/\.[^/.]+$/, "");
    };
    this.sortFiles = (files, order) => {
      const collator = new Intl.Collator(void 0, { numeric: true });
      return files.sort((a, b) => {
        const aWithoutExtension = this.removeExtension(a.filename);
        const bWithoutExtension = this.removeExtension(b.filename);
        if (order === "ascending") {
          return collator.compare(aWithoutExtension, bWithoutExtension);
        } else {
          return collator.compare(bWithoutExtension, aWithoutExtension);
        }
      });
    };
    this.CustomElement = (svgText) => {
      const parser = new DOMParser();
      return parser.parseFromString(svgText, "text/xml").documentElement;
    };
    this.recentNotes = recentNotes;
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_REVIEW_NOTES;
  }
  getDisplayText() {
    return "Review Notes";
  }
  onload() {
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h2", { text: "Review Notes" });
    const rootEl = createDiv({ cls: "recent-notes" });
    const childrenEl = rootEl.createDiv({ cls: "" });
    const navHeader = childrenEl.createDiv({ cls: "nav-header" });
    const navButtons = navHeader.createDiv({
      cls: "nav-buttons-container"
    });
    const navButtonSortAsc = navButtons.createDiv({
      cls: "clickable-icon nav-action-button",
      attr: {
        "aria-label": "Sort by file name (A to Z)"
      }
    });
    navButtonSortAsc.addEventListener("click", async (event) => {
      this.sortFiles(this.recentNotes.files, "ascending");
      await this.plugin.saveRecentNotes();
    });
    const navButtonSortDesc = navButtons.createDiv({
      cls: "clickable-icon nav-action-button",
      attr: {
        "aria-label": "Sort by file name (Z to A)"
      }
    });
    navButtonSortDesc.addEventListener("click", async (event) => {
      this.sortFiles(this.recentNotes.files, "descending");
      await this.plugin.saveRecentNotes();
    });
    const navButtonRemoveAll = navButtons.createDiv({
      cls: "clickable-icon nav-action-button",
      attr: {
        "aria-label": "Clear all recently modified notes"
      }
    });
    navButtonRemoveAll.addEventListener("click", async (event) => {
      this.recentNotes.files = [];
      await this.plugin.saveRecentNotes();
      new import_obsidian2.Notice("All recently modified notes have been removed from the list");
    });
    navButtonSortAsc.appendChild(this.CustomElement(icons["sortAsc"]));
    navButtonSortDesc.appendChild(this.CustomElement(icons["sortDesc"]));
    navButtonRemoveAll.appendChild((0, import_obsidian2.getIcon)("lucide-x"));
    this.recentNotes.files.forEach((file) => {
      const navFile = childrenEl.createDiv({
        cls: "nav-file"
      });
      const navFileTitle = navFile.createDiv({
        cls: "nav-file-title recent-notes-title"
      });
      const navFileTitleContent = navFileTitle.createDiv({
        cls: "nav-file-title-content recent-notes-content"
      });
      navFileTitleContent.setText(file.filename);
      navFileTitleContent.addEventListener("click", (event) => {
        const _file = this.app.vault.getFiles().find((f) => f.path === file.path);
        if (_file) {
          const leaf = this.app.workspace.getLeaf(false);
          if (leaf) {
            leaf.openFile(_file);
          }
        } else {
          new import_obsidian2.Notice("File not found! It may have been deleted or its path modified.");
        }
      });
      const removeButton = navFileTitle.createDiv({
        cls: "recent-notes-check"
      });
      removeButton.appendChild((0, import_obsidian2.getIcon)("lucide-check"));
      removeButton.addEventListener("click", async () => {
        this.recentNotes.files.splice(this.recentNotes.files.findIndex((item) => item.path === file.path), 1);
        await this.plugin.saveRecentNotes();
        this.onOpen();
      });
    });
    container.appendChild(rootEl);
  }
  async onClose() {
  }
};

// main.ts
var DEFAULT_DATA = {
  files: []
};
var RecentNotesPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.savePath = async (file) => {
      if (file.basename === void 0) {
        return;
      }
      this.recentNotes.files.findIndex(({ path }) => file.path === path) === -1 ? this.recentNotes.files.push({
        path: file.path,
        filename: file.basename
      }) : void 0;
      await this.saveRecentNotes();
    };
    this.renamePath = async (file, previousPath) => {
      const note = this.recentNotes.files.find((item) => item.path === previousPath);
      if (note) {
        note.path = file.path;
        note.filename = file.basename;
        await this.saveRecentNotes();
      }
    };
  }
  async onload() {
    await this.loadRecentNotes();
    this.registerEvent(this.app.vault.on("modify", this.savePath));
    this.registerEvent(this.app.vault.on("rename", this.renamePath));
    this.registerView(VIEW_TYPE_REVIEW_NOTES, (leaf) => {
      this.reviewNotesView = new ReviewNotesView(leaf, this.recentNotes, this);
      this.registerEvent(this.app.vault.on("create", this.savePath));
      return this.reviewNotesView;
    });
    addIcons();
    this.addRibbonIcon("file", "View Recent Notes", () => {
      this.activateView();
    });
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_REVIEW_NOTES);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: VIEW_TYPE_REVIEW_NOTES,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_TYPE_REVIEW_NOTES)[0]);
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_REVIEW_NOTES);
  }
  async loadRecentNotes() {
    this.recentNotes = Object.assign(DEFAULT_DATA, await super.loadData());
  }
  async saveRecentNotes() {
    await this.saveData(this.recentNotes);
    this.reviewNotesView.onOpen();
  }
};
